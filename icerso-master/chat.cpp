// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <chat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NameDoesNotExist> iceC_Chat_NameDoesNotExist_init("::Chat::NameDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NameAlreadyExists> iceC_Chat_NameAlreadyExists_init("::Chat::NameAlreadyExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::ServerAlreadyRegistered> iceC_Chat_ServerAlreadyRegistered_init("::Chat::ServerAlreadyRegistered");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::ServerDoesNotExist> iceC_Chat_ServerDoesNotExist_init("::Chat::ServerDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserAlreadyRegistered> iceC_Chat_UserAlreadyRegistered_init("::Chat::UserAlreadyRegistered");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserDoesNotExist> iceC_Chat_UserDoesNotExist_init("::Chat::UserDoesNotExist");

const ::std::string iceC_Chat_ChatServer_ids[2] =
{
    "::Chat::ChatServer",
    "::Ice::Object"
};
const ::std::string iceC_Chat_ChatServer_ops[] =
{
    "CreateGroup",
    "DeleteGroup",
    "GroupList",
    "LogIn",
    "LogOut",
    "getGroupServerByName",
    "getUserByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerServer",
    "unregisterServer"
};
const ::std::string iceC_Chat_ChatServer_LogIn_name = "LogIn";
const ::std::string iceC_Chat_ChatServer_getUserByName_name = "getUserByName";
const ::std::string iceC_Chat_ChatServer_GroupList_name = "GroupList";
const ::std::string iceC_Chat_ChatServer_getGroupServerByName_name = "getGroupServerByName";
const ::std::string iceC_Chat_ChatServer_CreateGroup_name = "CreateGroup";
const ::std::string iceC_Chat_ChatServer_DeleteGroup_name = "DeleteGroup";
const ::std::string iceC_Chat_ChatServer_registerServer_name = "registerServer";
const ::std::string iceC_Chat_ChatServer_unregisterServer_name = "unregisterServer";
const ::std::string iceC_Chat_ChatServer_LogOut_name = "LogOut";

const ::std::string iceC_Chat_GroupServer_ids[2] =
{
    "::Chat::GroupServer",
    "::Ice::Object"
};
const ::std::string iceC_Chat_GroupServer_ops[] =
{
    "Leave",
    "Name",
    "SendMessage",
    "UserList",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join"
};
const ::std::string iceC_Chat_GroupServer_join_name = "join";
const ::std::string iceC_Chat_GroupServer_Leave_name = "Leave";
const ::std::string iceC_Chat_GroupServer_SendMessage_name = "SendMessage";
const ::std::string iceC_Chat_GroupServer_UserList_name = "UserList";
const ::std::string iceC_Chat_GroupServer_Name_name = "Name";

const ::std::string iceC_Chat_GroupServerManager_ids[2] =
{
    "::Chat::GroupServerManager",
    "::Ice::Object"
};
const ::std::string iceC_Chat_GroupServerManager_ops[] =
{
    "CreateGroup",
    "DeleteGroup",
    "ListGroups",
    "getGroupServerByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Chat_GroupServerManager_CreateGroup_name = "CreateGroup";
const ::std::string iceC_Chat_GroupServerManager_ListGroups_name = "ListGroups";
const ::std::string iceC_Chat_GroupServerManager_DeleteGroup_name = "DeleteGroup";
const ::std::string iceC_Chat_GroupServerManager_getGroupServerByName_name = "getGroupServerByName";

const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};
const ::std::string iceC_Chat_User_ops[] =
{
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receivePrivateText",
    "receiveText"
};
const ::std::string iceC_Chat_User_getName_name = "getName";
const ::std::string iceC_Chat_User_receiveText_name = "receiveText";
const ::std::string iceC_Chat_User_receivePrivateText_name = "receivePrivateText";

}

Chat::NameDoesNotExist::~NameDoesNotExist()
{
}

const ::std::string&
Chat::NameDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NameDoesNotExist";
    return typeId;
}

Chat::NameAlreadyExists::~NameAlreadyExists()
{
}

const ::std::string&
Chat::NameAlreadyExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NameAlreadyExists";
    return typeId;
}

Chat::ServerAlreadyRegistered::~ServerAlreadyRegistered()
{
}

const ::std::string&
Chat::ServerAlreadyRegistered::ice_staticId()
{
    static const ::std::string typeId = "::Chat::ServerAlreadyRegistered";
    return typeId;
}

Chat::ServerDoesNotExist::~ServerDoesNotExist()
{
}

const ::std::string&
Chat::ServerDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::ServerDoesNotExist";
    return typeId;
}

Chat::UserAlreadyRegistered::~UserAlreadyRegistered()
{
}

const ::std::string&
Chat::UserAlreadyRegistered::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserAlreadyRegistered";
    return typeId;
}

Chat::UserDoesNotExist::~UserDoesNotExist()
{
}

const ::std::string&
Chat::UserDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserDoesNotExist";
    return typeId;
}

bool
Chat::ChatServer::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_ChatServer_ids, iceC_Chat_ChatServer_ids + 2, s);
}

::std::vector<::std::string>
Chat::ChatServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_ChatServer_ids[0], &iceC_Chat_ChatServer_ids[2]);
}

::std::string
Chat::ChatServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::ChatServer::ice_staticId()
{
    static const ::std::string typeId = "::Chat::ChatServer";
    return typeId;
}

bool
Chat::ChatServer::_iceD_LogIn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Chat::UserPrx> iceP_callback;
    istr->readAll(iceP_callback);
    inS.endReadParams();
    this->LogIn(::std::move(iceP_callback), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_getUserByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<::Chat::UserPrx> ret = this->getUserByName(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::ChatServer::_iceD_GroupList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::Chat::Groups ret = this->GroupList(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::ChatServer::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<::Chat::GroupServerPrx> ret = this->getGroupServerByName(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::ChatServer::_iceD_CreateGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    this->CreateGroup(::std::move(iceP_name), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_DeleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    this->DeleteGroup(::std::move(iceP_name), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_registerServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Chat::GroupServerManagerPrx> iceP_serverManager;
    istr->readAll(iceP_serverManager);
    inS.endReadParams();
    this->registerServer(::std::move(iceP_serverManager), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_unregisterServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Chat::GroupServerManagerPrx> iceP_serverManager;
    istr->readAll(iceP_serverManager);
    inS.endReadParams();
    this->unregisterServer(::std::move(iceP_serverManager), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_LogOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Chat::UserPrx> iceP_callback;
    istr->readAll(iceP_callback);
    inS.endReadParams();
    this->LogOut(::std::move(iceP_callback), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_ChatServer_ops, iceC_Chat_ChatServer_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_ChatServer_ops)
    {
        case 0:
        {
            return _iceD_CreateGroup(in, current);
        }
        case 1:
        {
            return _iceD_DeleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_GroupList(in, current);
        }
        case 3:
        {
            return _iceD_LogIn(in, current);
        }
        case 4:
        {
            return _iceD_LogOut(in, current);
        }
        case 5:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 6:
        {
            return _iceD_getUserByName(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_registerServer(in, current);
        }
        case 12:
        {
            return _iceD_unregisterServer(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
Chat::GroupServer::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServer_ids, iceC_Chat_GroupServer_ids + 2, s);
}

::std::vector<::std::string>
Chat::GroupServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_GroupServer_ids[0], &iceC_Chat_GroupServer_ids[2]);
}

::std::string
Chat::GroupServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServer::ice_staticId()
{
    static const ::std::string typeId = "::Chat::GroupServer";
    return typeId;
}

bool
Chat::GroupServer::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Chat::UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->join(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServer::_iceD_Leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Chat::UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->Leave(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServer::_iceD_SendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::shared_ptr<::Chat::UserPrx> iceP_sender;
    ::std::shared_ptr<::Chat::GroupServerPrx> iceP_gs;
    istr->readAll(iceP_message, iceP_sender, iceP_gs);
    inS.endReadParams();
    this->SendMessage(::std::move(iceP_message), ::std::move(iceP_sender), ::std::move(iceP_gs), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServer::_iceD_UserList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::Chat::Users ret = this->UserList(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServer::_iceD_Name(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->Name(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServer_ops, iceC_Chat_GroupServer_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServer_ops)
    {
        case 0:
        {
            return _iceD_Leave(in, current);
        }
        case 1:
        {
            return _iceD_Name(in, current);
        }
        case 2:
        {
            return _iceD_SendMessage(in, current);
        }
        case 3:
        {
            return _iceD_UserList(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_join(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
Chat::GroupServerManager::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServerManager_ids, iceC_Chat_GroupServerManager_ids + 2, s);
}

::std::vector<::std::string>
Chat::GroupServerManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_GroupServerManager_ids[0], &iceC_Chat_GroupServerManager_ids[2]);
}

::std::string
Chat::GroupServerManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServerManager::ice_staticId()
{
    static const ::std::string typeId = "::Chat::GroupServerManager";
    return typeId;
}

bool
Chat::GroupServerManager::_iceD_CreateGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<::Chat::GroupServerPrx> ret = this->CreateGroup(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServerManager::_iceD_ListGroups(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::Chat::Groups ret = this->ListGroups(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServerManager::_iceD_DeleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    this->DeleteGroup(::std::move(iceP_name), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServerManager::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<::Chat::GroupServerPrx> ret = this->getGroupServerByName(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServerManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServerManager_ops, iceC_Chat_GroupServerManager_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServerManager_ops)
    {
        case 0:
        {
            return _iceD_CreateGroup(in, current);
        }
        case 1:
        {
            return _iceD_DeleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_ListGroups(in, current);
        }
        case 3:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
Chat::User::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector<::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

::std::string
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
    static const ::std::string typeId = "::Chat::User";
    return typeId;
}

bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::User::_iceD_receiveText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msg;
    ::std::shared_ptr<::Chat::UserPrx> iceP_sender;
    ::std::string iceP_serverName;
    istr->readAll(iceP_msg, iceP_sender, iceP_serverName);
    inS.endReadParams();
    this->receiveText(::std::move(iceP_msg), ::std::move(iceP_sender), ::std::move(iceP_serverName), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::User::_iceD_receivePrivateText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msg;
    ::std::shared_ptr<::Chat::UserPrx> iceP_sender;
    istr->readAll(iceP_msg, iceP_sender);
    inS.endReadParams();
    this->receivePrivateText(::std::move(iceP_msg), ::std::move(iceP_sender), current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_ops, iceC_Chat_User_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_ops)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_receivePrivateText(in, current);
        }
        case 6:
        {
            return _iceD_receiveText(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Chat::ChatServerPrx::_iceI_LogIn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Chat::UserPrx>& iceP_callback, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_LogIn_name);
    outAsync->invoke(iceC_Chat_ChatServer_LogIn_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_callback);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::NameAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::ChatServerPrx::_iceI_getUserByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::UserPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_getUserByName_name);
    outAsync->invoke(iceC_Chat_ChatServer_getUserByName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}

void
Chat::ChatServerPrx::_iceI_GroupList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Groups>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_GroupList_name);
    outAsync->invoke(iceC_Chat_ChatServer_GroupList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Chat::ChatServerPrx::_iceI_getGroupServerByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::GroupServerPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_getGroupServerByName_name);
    outAsync->invoke(iceC_Chat_ChatServer_getGroupServerByName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::NameDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::ChatServerPrx::_iceI_CreateGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_CreateGroup_name);
    outAsync->invoke(iceC_Chat_ChatServer_CreateGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::NameAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::ChatServerPrx::_iceI_DeleteGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_DeleteGroup_name);
    outAsync->invoke(iceC_Chat_ChatServer_DeleteGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::NameDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::ChatServerPrx::_iceI_registerServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Chat::GroupServerManagerPrx>& iceP_serverManager, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_registerServer_name);
    outAsync->invoke(iceC_Chat_ChatServer_registerServer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_serverManager);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::ServerAlreadyRegistered&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::ChatServerPrx::_iceI_unregisterServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Chat::GroupServerManagerPrx>& iceP_serverManager, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_unregisterServer_name);
    outAsync->invoke(iceC_Chat_ChatServer_unregisterServer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_serverManager);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::ServerDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::ChatServerPrx::_iceI_LogOut(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Chat::UserPrx>& iceP_callback, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_ChatServer_LogOut_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_callback);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
Chat::ChatServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ChatServerPrx>();
}

const ::std::string&
Chat::ChatServerPrx::ice_staticId()
{
    return Chat::ChatServer::ice_staticId();
}

void
Chat::GroupServerPrx::_iceI_join(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_join_name);
    outAsync->invoke(iceC_Chat_GroupServer_join_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::UserAlreadyRegistered&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::GroupServerPrx::_iceI_Leave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Chat::UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_Leave_name);
    outAsync->invoke(iceC_Chat_GroupServer_Leave_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::GroupServerPrx::_iceI_SendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::shared_ptr<::Chat::UserPrx>& iceP_sender, const ::std::shared_ptr<::Chat::GroupServerPrx>& iceP_gs, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_SendMessage_name);
    outAsync->invoke(iceC_Chat_GroupServer_SendMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_sender, iceP_gs);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::GroupServerPrx::_iceI_UserList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Users>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_UserList_name);
    outAsync->invoke(iceC_Chat_GroupServer_UserList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Chat::GroupServerPrx::_iceI_Name(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_Name_name);
    outAsync->invoke(iceC_Chat_GroupServer_Name_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
Chat::GroupServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<GroupServerPrx>();
}

const ::std::string&
Chat::GroupServerPrx::ice_staticId()
{
    return Chat::GroupServer::ice_staticId();
}

void
Chat::GroupServerManagerPrx::_iceI_CreateGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::GroupServerPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_CreateGroup_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_CreateGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::NameAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::GroupServerManagerPrx::_iceI_ListGroups(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::Groups>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_ListGroups_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_ListGroups_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Chat::GroupServerManagerPrx::_iceI_DeleteGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_DeleteGroup_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_DeleteGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Chat::NameDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Chat::GroupServerManagerPrx::_iceI_getGroupServerByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::GroupServerPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getGroupServerByName_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_getGroupServerByName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
Chat::GroupServerManagerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<GroupServerManagerPrx>();
}

const ::std::string&
Chat::GroupServerManagerPrx::ice_staticId()
{
    return Chat::GroupServerManager::ice_staticId();
}

void
Chat::UserPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name);
    outAsync->invoke(iceC_Chat_User_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Chat::UserPrx::_iceI_receiveText(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msg, const ::std::shared_ptr<::Chat::UserPrx>& iceP_sender, const ::std::string& iceP_serverName, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receiveText_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msg, iceP_sender, iceP_serverName);
        },
        nullptr);
}

void
Chat::UserPrx::_iceI_receivePrivateText(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msg, const ::std::shared_ptr<::Chat::UserPrx>& iceP_sender, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receivePrivateText_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msg, iceP_sender);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
Chat::UserPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UserPrx>();
}

const ::std::string&
Chat::UserPrx::ice_staticId()
{
    return Chat::User::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Chat_ChatServer_LogIn_name = "LogIn";

const ::std::string iceC_Chat_ChatServer_getUserByName_name = "getUserByName";

const ::std::string iceC_Chat_ChatServer_GroupList_name = "GroupList";

const ::std::string iceC_Chat_ChatServer_getGroupServerByName_name = "getGroupServerByName";

const ::std::string iceC_Chat_ChatServer_CreateGroup_name = "CreateGroup";

const ::std::string iceC_Chat_ChatServer_DeleteGroup_name = "DeleteGroup";

const ::std::string iceC_Chat_ChatServer_registerServer_name = "registerServer";

const ::std::string iceC_Chat_ChatServer_unregisterServer_name = "unregisterServer";

const ::std::string iceC_Chat_ChatServer_LogOut_name = "LogOut";

const ::std::string iceC_Chat_GroupServer_join_name = "join";

const ::std::string iceC_Chat_GroupServer_Leave_name = "Leave";

const ::std::string iceC_Chat_GroupServer_SendMessage_name = "SendMessage";

const ::std::string iceC_Chat_GroupServer_UserList_name = "UserList";

const ::std::string iceC_Chat_GroupServer_Name_name = "Name";

const ::std::string iceC_Chat_GroupServerManager_CreateGroup_name = "CreateGroup";

const ::std::string iceC_Chat_GroupServerManager_ListGroups_name = "ListGroups";

const ::std::string iceC_Chat_GroupServerManager_DeleteGroup_name = "DeleteGroup";

const ::std::string iceC_Chat_GroupServerManager_getGroupServerByName_name = "getGroupServerByName";

const ::std::string iceC_Chat_User_getName_name = "getName";

const ::std::string iceC_Chat_User_receiveText_name = "receiveText";

const ::std::string iceC_Chat_User_receivePrivateText_name = "receivePrivateText";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NameDoesNotExist> iceC_Chat_NameDoesNotExist_init("::Chat::NameDoesNotExist");

}

Chat::NameDoesNotExist::~NameDoesNotExist() throw()
{
}

::std::string
Chat::NameDoesNotExist::ice_id() const
{
    return "::Chat::NameDoesNotExist";
}

Chat::NameDoesNotExist*
Chat::NameDoesNotExist::ice_clone() const
{
    return new NameDoesNotExist(*this);
}

void
Chat::NameDoesNotExist::ice_throw() const
{
    throw *this;
}

void
Chat::NameDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NameDoesNotExist", -1, true);
    Ice::StreamWriter< ::Chat::NameDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NameDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::NameDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NameAlreadyExists> iceC_Chat_NameAlreadyExists_init("::Chat::NameAlreadyExists");

}

Chat::NameAlreadyExists::~NameAlreadyExists() throw()
{
}

::std::string
Chat::NameAlreadyExists::ice_id() const
{
    return "::Chat::NameAlreadyExists";
}

Chat::NameAlreadyExists*
Chat::NameAlreadyExists::ice_clone() const
{
    return new NameAlreadyExists(*this);
}

void
Chat::NameAlreadyExists::ice_throw() const
{
    throw *this;
}

void
Chat::NameAlreadyExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NameAlreadyExists", -1, true);
    Ice::StreamWriter< ::Chat::NameAlreadyExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NameAlreadyExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::NameAlreadyExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::ServerAlreadyRegistered> iceC_Chat_ServerAlreadyRegistered_init("::Chat::ServerAlreadyRegistered");

}

Chat::ServerAlreadyRegistered::~ServerAlreadyRegistered() throw()
{
}

::std::string
Chat::ServerAlreadyRegistered::ice_id() const
{
    return "::Chat::ServerAlreadyRegistered";
}

Chat::ServerAlreadyRegistered*
Chat::ServerAlreadyRegistered::ice_clone() const
{
    return new ServerAlreadyRegistered(*this);
}

void
Chat::ServerAlreadyRegistered::ice_throw() const
{
    throw *this;
}

void
Chat::ServerAlreadyRegistered::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::ServerAlreadyRegistered", -1, true);
    Ice::StreamWriter< ::Chat::ServerAlreadyRegistered, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::ServerAlreadyRegistered::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::ServerAlreadyRegistered, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::ServerDoesNotExist> iceC_Chat_ServerDoesNotExist_init("::Chat::ServerDoesNotExist");

}

Chat::ServerDoesNotExist::~ServerDoesNotExist() throw()
{
}

::std::string
Chat::ServerDoesNotExist::ice_id() const
{
    return "::Chat::ServerDoesNotExist";
}

Chat::ServerDoesNotExist*
Chat::ServerDoesNotExist::ice_clone() const
{
    return new ServerDoesNotExist(*this);
}

void
Chat::ServerDoesNotExist::ice_throw() const
{
    throw *this;
}

void
Chat::ServerDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::ServerDoesNotExist", -1, true);
    Ice::StreamWriter< ::Chat::ServerDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::ServerDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::ServerDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserAlreadyRegistered> iceC_Chat_UserAlreadyRegistered_init("::Chat::UserAlreadyRegistered");

}

Chat::UserAlreadyRegistered::~UserAlreadyRegistered() throw()
{
}

::std::string
Chat::UserAlreadyRegistered::ice_id() const
{
    return "::Chat::UserAlreadyRegistered";
}

Chat::UserAlreadyRegistered*
Chat::UserAlreadyRegistered::ice_clone() const
{
    return new UserAlreadyRegistered(*this);
}

void
Chat::UserAlreadyRegistered::ice_throw() const
{
    throw *this;
}

void
Chat::UserAlreadyRegistered::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserAlreadyRegistered", -1, true);
    Ice::StreamWriter< ::Chat::UserAlreadyRegistered, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserAlreadyRegistered::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::UserAlreadyRegistered, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserDoesNotExist> iceC_Chat_UserDoesNotExist_init("::Chat::UserDoesNotExist");

}

Chat::UserDoesNotExist::~UserDoesNotExist() throw()
{
}

::std::string
Chat::UserDoesNotExist::ice_id() const
{
    return "::Chat::UserDoesNotExist";
}

Chat::UserDoesNotExist*
Chat::UserDoesNotExist::ice_clone() const
{
    return new UserDoesNotExist(*this);
}

void
Chat::UserDoesNotExist::ice_throw() const
{
    throw *this;
}

void
Chat::UserDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserDoesNotExist", -1, true);
    Ice::StreamWriter< ::Chat::UserDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::UserDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::ChatServer* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatServer>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::ChatServer;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_LogIn(const ::Chat::UserPrx& iceP_callback, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_LogIn_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_LogIn_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_LogIn_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_callback);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_LogIn_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::ChatServer::end_LogIn(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_LogIn_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_getUserByName(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_getUserByName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_getUserByName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_getUserByName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_getUserByName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::UserPrx
IceProxy::Chat::ChatServer::end_getUserByName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_getUserByName_name);
    ::Chat::UserPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_GroupList(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_GroupList_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_GroupList_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_GroupList_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_ChatServer_GroupList_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Groups
IceProxy::Chat::ChatServer::end_GroupList(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_GroupList_name);
    ::Chat::Groups ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_getGroupServerByName(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_getGroupServerByName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_getGroupServerByName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_getGroupServerByName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_getGroupServerByName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::GroupServerPrx
IceProxy::Chat::ChatServer::end_getGroupServerByName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_getGroupServerByName_name);
    ::Chat::GroupServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_CreateGroup(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_CreateGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_CreateGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_CreateGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_CreateGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::ChatServer::end_CreateGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_CreateGroup_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_DeleteGroup(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_DeleteGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_DeleteGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_DeleteGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_DeleteGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::ChatServer::end_DeleteGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_DeleteGroup_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_registerServer(const ::Chat::GroupServerManagerPrx& iceP_serverManager, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_registerServer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_registerServer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_registerServer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_serverManager);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_registerServer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::ChatServer::end_registerServer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_registerServer_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::ServerAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_unregisterServer(const ::Chat::GroupServerManagerPrx& iceP_serverManager, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_ChatServer_unregisterServer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_unregisterServer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_unregisterServer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_serverManager);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_unregisterServer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::ChatServer::end_unregisterServer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_ChatServer_unregisterServer_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::ServerDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::_iceI_begin_LogOut(const ::Chat::UserPrx& iceP_callback, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_ChatServer_LogOut_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_ChatServer_LogOut_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_callback);
        result->endWriteParams();
        result->invoke(iceC_Chat_ChatServer_LogOut_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::ChatServer::end_LogOut(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_ChatServer_LogOut_name);
}

::IceProxy::Ice::Object*
IceProxy::Chat::ChatServer::_newInstance() const
{
    return new ChatServer;
}

const ::std::string&
IceProxy::Chat::ChatServer::ice_staticId()
{
    return ::Chat::ChatServer::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::GroupServer* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Chat::GroupServer>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::GroupServer;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_join(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_join_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_join_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_join_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServer_join_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServer::end_join(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_join_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_Leave(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_Leave_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_Leave_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_Leave_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServer_Leave_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServer::end_Leave(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_Leave_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_SendMessage(const ::std::string& iceP_message, const ::Chat::UserPrx& iceP_sender, const ::Chat::GroupServerPrx& iceP_gs, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_SendMessage_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_SendMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_SendMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_sender);
        ostr->write(iceP_gs);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServer_SendMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServer::end_SendMessage(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_SendMessage_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_UserList(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_UserList_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_UserList_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_UserList_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServer_UserList_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Users
IceProxy::Chat::GroupServer::end_UserList(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_UserList_name);
    ::Chat::Users ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_Name(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_Name_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_Name_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_Name_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServer_Name_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::GroupServer::end_Name(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_Name_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::Chat::GroupServer::_newInstance() const
{
    return new GroupServer;
}

const ::std::string&
IceProxy::Chat::GroupServer::ice_staticId()
{
    return ::Chat::GroupServer::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::GroupServerManager* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Chat::GroupServerManager>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::GroupServerManager;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_CreateGroup(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_CreateGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_CreateGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_CreateGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServerManager_CreateGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::end_CreateGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_CreateGroup_name);
    ::Chat::GroupServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_ListGroups(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_ListGroups_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_ListGroups_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_ListGroups_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServerManager_ListGroups_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Groups
IceProxy::Chat::GroupServerManager::end_ListGroups(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_ListGroups_name);
    ::Chat::Groups ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_DeleteGroup(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_DeleteGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_DeleteGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_DeleteGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServerManager_DeleteGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServerManager::end_DeleteGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_DeleteGroup_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_getGroupServerByName(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getGroupServerByName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_getGroupServerByName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_getGroupServerByName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServerManager_getGroupServerByName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::end_getGroupServerByName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_getGroupServerByName_name);
    ::Chat::GroupServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::Chat::GroupServerManager::_newInstance() const
{
    return new GroupServerManager;
}

const ::std::string&
IceProxy::Chat::GroupServerManager::ice_staticId()
{
    return ::Chat::GroupServerManager::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::User* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Chat::User>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::User;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_User_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::User::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_User_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receiveText(const ::std::string& iceP_msg, const ::Chat::UserPrx& iceP_sender, const ::std::string& iceP_serverName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receiveText_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receiveText_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msg);
        ostr->write(iceP_sender);
        ostr->write(iceP_serverName);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receiveText_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receiveText(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receiveText_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receivePrivateText(const ::std::string& iceP_msg, const ::Chat::UserPrx& iceP_sender, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receivePrivateText_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receivePrivateText_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msg);
        ostr->write(iceP_sender);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receivePrivateText_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receivePrivateText(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receivePrivateText_name);
}

::IceProxy::Ice::Object*
IceProxy::Chat::User::_newInstance() const
{
    return new User;
}

const ::std::string&
IceProxy::Chat::User::ice_staticId()
{
    return ::Chat::User::ice_staticId();
}

Chat::ChatServer::~ChatServer()
{
}

::Ice::Object* Chat::upCast(::Chat::ChatServer* p) { return p; }


namespace
{
const ::std::string iceC_Chat_ChatServer_ids[2] =
{
    "::Chat::ChatServer",
    "::Ice::Object"
};

}

bool
Chat::ChatServer::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_ChatServer_ids, iceC_Chat_ChatServer_ids + 2, s);
}

::std::vector< ::std::string>
Chat::ChatServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_ChatServer_ids[0], &iceC_Chat_ChatServer_ids[2]);
}

const ::std::string&
Chat::ChatServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::ChatServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::ChatServer";
    return typeId;
#else
    return iceC_Chat_ChatServer_ids[0];
#endif
}

bool
Chat::ChatServer::_iceD_LogIn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Chat::UserPrx iceP_callback;
    istr->read(iceP_callback);
    inS.endReadParams();
    this->LogIn(iceP_callback, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_getUserByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ::Chat::UserPrx ret = this->getUserByName(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::ChatServer::_iceD_GroupList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Chat::Groups ret = this->GroupList(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::ChatServer::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ::Chat::GroupServerPrx ret = this->getGroupServerByName(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::ChatServer::_iceD_CreateGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    this->CreateGroup(iceP_name, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_DeleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    this->DeleteGroup(iceP_name, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_registerServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Chat::GroupServerManagerPrx iceP_serverManager;
    istr->read(iceP_serverManager);
    inS.endReadParams();
    this->registerServer(iceP_serverManager, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_unregisterServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Chat::GroupServerManagerPrx iceP_serverManager;
    istr->read(iceP_serverManager);
    inS.endReadParams();
    this->unregisterServer(iceP_serverManager, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::ChatServer::_iceD_LogOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Chat::UserPrx iceP_callback;
    istr->read(iceP_callback);
    inS.endReadParams();
    this->LogOut(iceP_callback, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_Chat_ChatServer_all[] =
{
    "CreateGroup",
    "DeleteGroup",
    "GroupList",
    "LogIn",
    "LogOut",
    "getGroupServerByName",
    "getUserByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerServer",
    "unregisterServer"
};

}

bool
Chat::ChatServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_ChatServer_all, iceC_Chat_ChatServer_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_ChatServer_all)
    {
        case 0:
        {
            return _iceD_CreateGroup(in, current);
        }
        case 1:
        {
            return _iceD_DeleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_GroupList(in, current);
        }
        case 3:
        {
            return _iceD_LogIn(in, current);
        }
        case 4:
        {
            return _iceD_LogOut(in, current);
        }
        case 5:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 6:
        {
            return _iceD_getUserByName(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_registerServer(in, current);
        }
        case 12:
        {
            return _iceD_unregisterServer(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Chat::ChatServer::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Chat::ChatServer, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::ChatServer::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::ChatServer, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Chat::_icePatchObjectPtr(ChatServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::ChatServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::ChatServer::ice_staticId(), v);
    }
}

Chat::GroupServer::~GroupServer()
{
}

::Ice::Object* Chat::upCast(::Chat::GroupServer* p) { return p; }


namespace
{
const ::std::string iceC_Chat_GroupServer_ids[2] =
{
    "::Chat::GroupServer",
    "::Ice::Object"
};

}

bool
Chat::GroupServer::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServer_ids, iceC_Chat_GroupServer_ids + 2, s);
}

::std::vector< ::std::string>
Chat::GroupServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_GroupServer_ids[0], &iceC_Chat_GroupServer_ids[2]);
}

const ::std::string&
Chat::GroupServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::GroupServer";
    return typeId;
#else
    return iceC_Chat_GroupServer_ids[0];
#endif
}

bool
Chat::GroupServer::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Chat::UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->join(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServer::_iceD_Leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Chat::UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->Leave(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServer::_iceD_SendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    ::Chat::UserPrx iceP_sender;
    ::Chat::GroupServerPrx iceP_gs;
    istr->read(iceP_message);
    istr->read(iceP_sender);
    istr->read(iceP_gs);
    inS.endReadParams();
    this->SendMessage(iceP_message, iceP_sender, iceP_gs, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServer::_iceD_UserList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Chat::Users ret = this->UserList(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServer::_iceD_Name(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->Name(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_Chat_GroupServer_all[] =
{
    "Leave",
    "Name",
    "SendMessage",
    "UserList",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join"
};

}

bool
Chat::GroupServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServer_all, iceC_Chat_GroupServer_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServer_all)
    {
        case 0:
        {
            return _iceD_Leave(in, current);
        }
        case 1:
        {
            return _iceD_Name(in, current);
        }
        case 2:
        {
            return _iceD_SendMessage(in, current);
        }
        case 3:
        {
            return _iceD_UserList(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_join(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Chat::GroupServer::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Chat::GroupServer, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::GroupServer::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::GroupServer, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Chat::_icePatchObjectPtr(GroupServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::GroupServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::GroupServer::ice_staticId(), v);
    }
}

Chat::GroupServerManager::~GroupServerManager()
{
}

::Ice::Object* Chat::upCast(::Chat::GroupServerManager* p) { return p; }


namespace
{
const ::std::string iceC_Chat_GroupServerManager_ids[2] =
{
    "::Chat::GroupServerManager",
    "::Ice::Object"
};

}

bool
Chat::GroupServerManager::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServerManager_ids, iceC_Chat_GroupServerManager_ids + 2, s);
}

::std::vector< ::std::string>
Chat::GroupServerManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_GroupServerManager_ids[0], &iceC_Chat_GroupServerManager_ids[2]);
}

const ::std::string&
Chat::GroupServerManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServerManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::GroupServerManager";
    return typeId;
#else
    return iceC_Chat_GroupServerManager_ids[0];
#endif
}

bool
Chat::GroupServerManager::_iceD_CreateGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ::Chat::GroupServerPrx ret = this->CreateGroup(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServerManager::_iceD_ListGroups(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Chat::Groups ret = this->ListGroups(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::GroupServerManager::_iceD_DeleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    this->DeleteGroup(iceP_name, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::GroupServerManager::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ::Chat::GroupServerPrx ret = this->getGroupServerByName(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_Chat_GroupServerManager_all[] =
{
    "CreateGroup",
    "DeleteGroup",
    "ListGroups",
    "getGroupServerByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
Chat::GroupServerManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServerManager_all, iceC_Chat_GroupServerManager_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServerManager_all)
    {
        case 0:
        {
            return _iceD_CreateGroup(in, current);
        }
        case 1:
        {
            return _iceD_DeleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_ListGroups(in, current);
        }
        case 3:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Chat::GroupServerManager::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Chat::GroupServerManager, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::GroupServerManager::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::GroupServerManager, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Chat::_icePatchObjectPtr(GroupServerManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::GroupServerManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::GroupServerManager::ice_staticId(), v);
    }
}

Chat::User::~User()
{
}

::Ice::Object* Chat::upCast(::Chat::User* p) { return p; }


namespace
{
const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};

}

bool
Chat::User::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector< ::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

const ::std::string&
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::User";
    return typeId;
#else
    return iceC_Chat_User_ids[0];
#endif
}

bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Chat::User::_iceD_receiveText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msg;
    ::Chat::UserPrx iceP_sender;
    ::std::string iceP_serverName;
    istr->read(iceP_msg);
    istr->read(iceP_sender);
    istr->read(iceP_serverName);
    inS.endReadParams();
    this->receiveText(iceP_msg, iceP_sender, iceP_serverName, current);
    inS.writeEmptyParams();
    return true;
}

bool
Chat::User::_iceD_receivePrivateText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msg;
    ::Chat::UserPrx iceP_sender;
    istr->read(iceP_msg);
    istr->read(iceP_sender);
    inS.endReadParams();
    this->receivePrivateText(iceP_msg, iceP_sender, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_Chat_User_all[] =
{
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receivePrivateText",
    "receiveText"
};

}

bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_all, iceC_Chat_User_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_all)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_receivePrivateText(in, current);
        }
        case 6:
        {
            return _iceD_receiveText(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Chat::User::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Chat::User, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::User::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Chat::User, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Chat::_icePatchObjectPtr(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::User::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
